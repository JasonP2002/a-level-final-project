package CinemaInc;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jason
 */
public class BasketUI extends javax.swing.JFrame { //BasketUI class initalizes and contains all methods
                                                  //related to the Basket form
    
    //New Booking, Clock, Currency, Current, FileHandling,
    //Search and Sort objects created
    Booking booking = new Booking();
    Clock basketClock = new Clock();
    Currency currency = new Currency();
    Current current = new Current();
    FileHandling fileHandling = new FileHandling();
    Search search = new Search();
    Sort sort = new Sort();

    String currentUserID = current.getCurrentUserID(); //Stores primary key of current user
    int numberBasketItems = search.countBasketItems(currentUserID); //Stores number of basket items the current user has
    //Stores the current users basket items as a 2D array
    String[][] basketItems = search.getBasketItems(currentUserID, numberBasketItems);
    //Stores primary keys of current users basket items as an array
    String bookingPK[] = new String[numberBasketItems];
    
    int currencyIndex = currency.getCurrencyIndex(); //Stores index of users chosen currency
    String currencySymbol = currency.findSymbol(currencyIndex); //Stores symbol of users chosen currency

    /**
     * Constructor method for BasketUI
     * 
     * Creates new form BasketUI
     * Starts clock
     * Displays current users basket items on table
     * If user has items in their basket, calculates and displays total cost of basket
     */
    public BasketUI() {
        initComponents();
        
        setLocationRelativeTo(null);

        basketClock.setLabel(timeLbl);
        basketClock.setFrame(this);
        basketClock.start();

        basketIntoTable();

        if (numberBasketItems > 0) {
            calculateTotal();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cinemaLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        timeLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        bookBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        totalLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        basketTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cinemaLbl.setFont(new java.awt.Font("Tahoma", 3, 60)); // NOI18N
        cinemaLbl.setText("Cinema Inc.");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("My Basket");

        timeLbl.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        timeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLbl.setText("00:00");

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backBtn.setText("Main Menu");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        bookBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        bookBtn.setText("Book");
        bookBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        editBtn.setText("Edit Event Tickets");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteBtn.setText("Remove Event Tickets");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        totalLbl.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        totalLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLbl.setText("Total: Â£0.00");
        totalLbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        basketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event", "Tickets", "Seats", "Price"
            }
        ));
        jScrollPane1.setViewportView(basketTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cinemaLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(totalLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(100, 100, 100))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cinemaLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        current.setCurrentForm("Main Menu"); //Sets currentForm in Current class to "Main Menu"

        basketClock.stopClock();
        MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
        mainMenuForm.setVisible(true);
        dispose(); //Current form disposed of
    }//GEN-LAST:event_backBtnActionPerformed

    private void bookBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookBtnActionPerformed
        //Current users basket items saved to finalized bookings file
        fileHandling.finalizeBookings(basketItems);
        
        int numberRecords = search.countRecords("bookings.txt"); //Stores number of records currently in bookings file
        sort.bubbleSort("bookings.txt", 6, numberRecords); //File sorted into ascending order of primary key
        
        //Current users basket items deleted from basket file
        fileHandling.emptyBasket(bookingPK);
        //Any other basket items with seat selections that clash
        //with seat selections in the basket items that were 
        //just moved to the finalized bookings file are deleted
        fileHandling.removeBasketClashes(basketItems, numberBasketItems);

        JOptionPane.showMessageDialog(null, "Your events have been booked!", "Booked!", JOptionPane.INFORMATION_MESSAGE);

        current.setCurrentForm("Main Menu"); //currentForm in Current class set to "Main Menu"

        basketClock.stopClock();
        MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
        mainMenuForm.setVisible(true);
        dispose(); //Current form disposed of
    }//GEN-LAST:event_bookBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        //Stores table row of selected basket item
        int selectedRow = basketTable.getSelectedRow();
        int answer; //Stores answer to JOptionPane question prior to basket item being edited
        String editBookingID; //Stores primary key of basket item being edited
        String itemEventID; //Stores primary key of event in selected basket item
        String event[] = new String[8]; //Stores details of event in selected basket item as an array
        int numRecords; //Stores number of items currently in events file
        int numTickets; //Stores number of tickets in selected basket item
        float bookingPrice; //Stores price of selected basket item

        if (selectedRow != -1) { //If user has selected a basket item...

            answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to edit this item?", "Edit?", JOptionPane.YES_NO_OPTION);

            if (answer == JOptionPane.YES_OPTION) {
                
                editBookingID = basketItems[selectedRow][0];
                itemEventID = basketItems[selectedRow][2];

                numTickets = Integer.parseInt(basketItems[selectedRow][3]);
                bookingPrice = Float.parseFloat(basketItems[selectedRow][5]);

                numRecords = search.countRecords("events.txt");
                event = search.eventBinarySearch(itemEventID, numRecords);

                //Sets currentEvent[] in Current class to event of selected basket item
                current.setCurrentEvent(event);
                
                //Sets booking variables in Booking class to details of selected basket item
                booking.setEditBookingID(editBookingID);
                booking.setNumTickets(numTickets);
                booking.setBookingPrice(bookingPrice);

                current.setCurrentForm("Edit Booking 1"); //Sets currentForm in Current class to "Edit Booking 1"

                basketClock.stopClock();
                EventBookingUI editBooking1Form = new EventBookingUI(); //New EventBookingUI object created
                editBooking1Form.setVisible(true);
                dispose(); //Current form disposed of
            }

        } else { //If user has not selected a basket item...
            JOptionPane.showMessageDialog(null, "Please select a basket item.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //Stores table row of selected basket item
        int selectedRow = basketTable.getSelectedRow();
        int answer; //Stores answer to JOptionPane question prior to basket item being deleted
        String deleteID; //Stores primary key of basket item being deleted
        boolean removeSuccess; //Stores whether basket item was deleted successfully or not

        if (selectedRow != -1) { //If user has selected a basket item...

            answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to remove this item?", "Remove?", JOptionPane.YES_NO_OPTION);

            if (answer == JOptionPane.YES_OPTION) {
                deleteID = basketItems[selectedRow][0];

                removeSuccess = fileHandling.deleteRecord(deleteID, 6, "basket.txt");

                if (removeSuccess == true) { //If basket item was deleted successfully...
                    JOptionPane.showMessageDialog(null, "Item successfully removed!", "Success!", JOptionPane.INFORMATION_MESSAGE);

                    current.setCurrentForm("Main Menu"); //Sets currentForm in Current class to "Main Menu"

                    basketClock.stopClock();
                    MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
                    mainMenuForm.setVisible(true);
                    dispose(); //Current form disposed of
                }
            }

        } else { //If user has not selected a basket item...
            JOptionPane.showMessageDialog(null, "Please select a basket item.", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    /**
     * Displays all basket items to table
     */
    public void basketIntoTable() {
        //New DefaultTableModel created for basketTable
        DefaultTableModel basketModel = (DefaultTableModel) basketTable.getModel();
        String eventID; //Stores primary key of event in current basket item
        float amount = 0; //Stores cost of current basket item
         //Stores cost of current basket item after currency conversion as a String
        String amountOutput = "";
        
        String[] row = new String[4]; //Stores current row to be written to table

        //Adds all basket items to table
        for (int currentrow = 0; currentrow < basketItems.length; currentrow++) {
            bookingPK[currentrow] = basketItems[currentrow][0];

            eventID = basketItems[currentrow][2];
            row[0] = search.getEventTitle(eventID);
            
            row[1] = basketItems[currentrow][3];
            row[2] = basketItems[currentrow][4];

            amount = Float.parseFloat(basketItems[currentrow][5]);
            amountOutput = currency.convertAmount(amount, currencyIndex);
            
            row[3] = currencySymbol + amountOutput;

            //Adds row to table
            basketModel.addRow(row);
        }
    }

    /**
     * Calculates and displays total cost of all basket items
     */
    public void calculateTotal() {
        float total = 0; //Stores total cost of all basket items
        //Stores total cost of all basket items after currency conversion as a String
        String totalOutput = "";

        //Calculates total cost of all basket items
        for (int i = 0; i < numberBasketItems; i++) {
            total = total + Float.parseFloat(basketItems[i][5]);
        }

        totalOutput = currency.convertAmount(total, currencyIndex);
        totalLbl.setText("Total: " + currencySymbol + totalOutput);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasketUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasketUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasketUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasketUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BasketUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable basketTable;
    private javax.swing.JButton bookBtn;
    private javax.swing.JLabel cinemaLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel totalLbl;
    // End of variables declaration//GEN-END:variables
}
