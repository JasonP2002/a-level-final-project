package CinemaInc;

import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jason
 */
public class AddEventUI extends javax.swing.JFrame { //AddEventUI class initializes and contains all methods related to
                                                    //the Add/Edit Event Form

    //New Clock, Current, FileHandling, Image, Search, Sort 
    //and Validation objects created
    Clock addEventClock = new Clock();
    Current current = new Current();
    FileHandling fileHandling = new FileHandling();
    Image image = new Image();
    Search search = new Search();
    Sort sort = new Sort();
    Validation validation = new Validation();

    String currentForm = current.getCurrentForm(); //Stores forms current purpose

    /**
     * Constructor method for AddEventUI class
     *
     * Creates new form AddEventUI 
     * Sets form features depending on forms current purpose 
     * Starts clock 
     * Displays event icon
     */
    public AddEventUI() {
        initComponents();

        setLocationRelativeTo(null);

        setFeatures();

        addEventClock.setLabel(timeLbl);
        addEventClock.setFrame(this);
        addEventClock.start();

        setEventIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cinemaLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        timeLbl = new javax.swing.JLabel();
        imageLbl = new javax.swing.JLabel();
        eventTitleLbl = new javax.swing.JLabel();
        eventTitleTxt = new javax.swing.JTextField();
        typeLbl = new javax.swing.JLabel();
        ageLbl = new javax.swing.JLabel();
        ageTxt = new javax.swing.JTextField();
        dateLbl = new javax.swing.JLabel();
        dateTxt = new javax.swing.JTextField();
        eventTimeLbl = new javax.swing.JLabel();
        eventTimeTxt = new javax.swing.JTextField();
        priceLbl = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        descriptionLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        backBtn = new javax.swing.JButton();
        addEditBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        typeBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        cinemaLbl.setFont(new java.awt.Font("Tahoma", 3, 60)); // NOI18N
        cinemaLbl.setText("Cinema Inc.");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Add New Event");

        timeLbl.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        timeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLbl.setText("00:00");

        imageLbl.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        imageLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLbl.setToolTipText("");
        imageLbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        eventTitleLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        eventTitleLbl.setText("Title:");

        eventTitleTxt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        typeLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        typeLbl.setText("Event Type:");

        ageLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ageLbl.setText("Age Rating: ");

        ageTxt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        dateLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        dateLbl.setText("Date:");

        dateTxt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        eventTimeLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        eventTimeLbl.setText("Time: ");

        eventTimeTxt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        priceLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        priceLbl.setText("Ticket Price: Â£");

        priceTxt.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        descriptionLbl.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        descriptionLbl.setText("Description: ");

        descriptionTxt.setColumns(20);
        descriptionTxt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        descriptionTxt.setRows(5);
        jScrollPane1.setViewportView(descriptionTxt);

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        addEditBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        addEditBtn.setText("Add Event");
        addEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEditBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteBtn.setText("Delete Event");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        typeBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        typeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Film", "Music", "Other" }));
        typeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(imageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eventTitleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eventTimeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(priceLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .addComponent(descriptionLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(eventTitleTxt)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(priceTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                        .addComponent(eventTimeTxt, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(typeBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ageTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cinemaLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(addEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cinemaLbl)
                    .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eventTitleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventTitleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(typeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eventTimeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eventTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(priceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(176, 176, 176)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(addEditBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEditBtnActionPerformed
        String id = ""; //Stores primary key of new/edited event
        String eventType; //Stores event type of new/edited event

        //Stores users inputs from text fields/combo box/text area
        String title = eventTitleTxt.getText();
        String type = String.valueOf(typeBox.getSelectedItem());
        String age = ageTxt.getText();
        String date = dateTxt.getText();
        String time = eventTimeTxt.getText();
        String price = priceTxt.getText();
        String desc = String.valueOf(descriptionTxt.getText());

        String[] newEvent = new String[8]; //Stores inputs as an array

        boolean allValid = false; //Stores whether all validation checks have been met or not
        boolean generalValid = false; //Stores whether validation checks shared by adding + editing an event have been met or not

        //Booleans for the validation checks utulized only when adding a new event
        boolean agePresence; //Stores whether age field has an input or not
        boolean ageLength; //Stores whether an age input is of length 2 or not
        boolean ageType; //Stores whether an age input is of the correct data type (integer) or not
        boolean priceFormat; //Stores whether a price input is of the correct format or not (0.00)

        int answer; //Stores answer of confirmation JOptionPane prior to a user editing an event
        boolean success; //Stores whether event has been added/edited successfully or not
        int numberRecords; //Stores the number of records currently in the events file

        //If form is being used to add an event...
        if (currentForm.equals("Add An Event")) {
            //Generate a new primary key
            eventType = findEventType(type);
            id = fileHandling.generatePK(eventType);
        }
        //If form is being used to edit an event...
        if (currentForm.equals("Edit Event")) {
            //Get primary key of record being edited
            id = current.getCurrentEventID();
        }

        //Stores full record as a comma seperated String
        String record = id + "," + title + "," + type + "," + age + "," + date + "," + time + "," + price + "," + desc;

        if (currentForm.equals("Add An Event")) { //If form is being used to add an event...
            generalValid = validation(title, date, time, desc);

            //If validation checks shared by adding + editing an event have been met...
            if (generalValid == true) {

                //Validation checks performed only when adding an event
                agePresence = validation.presenceCheck(age);
                if (agePresence == false) {
                    JOptionPane.showMessageDialog(null, "Please enter all information.", "Missing Information", JOptionPane.ERROR_MESSAGE);
                } else {

                    ageLength = validation.lengthCheck(age, 2);
                    if (ageLength == false) {
                        JOptionPane.showMessageDialog(null, "Please enter an age rating of two numbers.", "Age Rating Error", JOptionPane.ERROR_MESSAGE);
                    } else {

                        ageType = validation.integerTypeCheck(age);
                        if (ageType == false) {
                            JOptionPane.showMessageDialog(null, "Please enter an age rating of two numbers.", "Age Rating Error", JOptionPane.ERROR_MESSAGE);
                        } else {

                            priceFormat = validation.priceFormatCheck(price);
                            if (priceFormat == false) {
                                JOptionPane.showMessageDialog(null, "Please enter ticket price in the correct format (0.00).", "Ticket Price Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                allValid = true;
                            }
                        }
                    }
                }
            }

            if (allValid == true) { //If all validation checks have been met...

                success = fileHandling.addRecord(record, "events.txt");

                if (success == true) { //If record was added successfully to file...
                    numberRecords = search.countRecords("events.txt");
                    sort.bubbleSort("events.txt", 8, numberRecords); //File sorted to ascending order of primary key

                    JOptionPane.showMessageDialog(null, "Event for " + title + " successfully created!", "Success!", JOptionPane.INFORMATION_MESSAGE);

                    newEvent = record.split(","); //New event details split into array
                    current.setCurrentEvent(newEvent); //currentEvent in Current class set to newEvent

                    current.setCurrentForm("Event Info"); //currentForm in Current class set to "Event Info"

                    addEventClock.stopClock();
                    EventInfoUI eventInfoForm = new EventInfoUI(); //New EventInfoUI object created
                    eventInfoForm.setVisible(true);
                    dispose(); //Current form disposed of
                }
            }
        }

        if (currentForm == "Edit Event") { //If form being used to edit an event...

            answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to edit this event?", "Edit?", JOptionPane.YES_NO_OPTION);

            if (answer == JOptionPane.YES_OPTION) {
                allValid = validation(title, date, time, desc);

                if (allValid == true) { //If all validation checks met...

                    success = fileHandling.editRecord(id, record, 8, "events.txt");
                    System.gc();

                    if (success == true) { //If record edited successfully in file
                        JOptionPane.showMessageDialog(null, "Event successfully edited!", "Success!", JOptionPane.INFORMATION_MESSAGE);

                        newEvent = record.split(","); //Edited events details split into array
                        current.setCurrentEvent(newEvent); //currentEvent in Current class set to newEvent

                        current.setCurrentForm("Event Info"); //currentForm in Current class set to "Event Info"

                        addEventClock.stopClock();
                        EventInfoUI eventInfoForm = new EventInfoUI(); //New EventInfoUI object created
                        eventInfoForm.setVisible(true);
                        dispose(); //Current form disposed of
                    }
                }
            }
        }
    }//GEN-LAST:event_addEditBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        if (currentForm.equals("Add An Event")) { //If form being used to add an event...
            current.setCurrentForm("Event Search"); //currentForm in Current class set to "Event Search"

            addEventClock.stopClock();
            EventSearchUI eventSearch = new EventSearchUI(); //New EventSearchUI object created
            eventSearch.setVisible(true);
            dispose(); //Current form disposed of 
        }

        if (currentForm.equals("Edit Event")) { //If form being used to edit an event...
            current.setCurrentForm("Event Info"); //currentForm in Current class set to "Event Info"

            addEventClock.stopClock();
            EventInfoUI eventInfoForm = new EventInfoUI(); //New EventInfoUI object created
            eventInfoForm.setVisible(true);
            dispose(); //Current form disposed of
        }
    }//GEN-LAST:event_backBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        boolean deleteSuccess; //Stores whether event was successfully deleted or not

        String deleteEventID = current.getCurrentEventID(); //Stores primary key of event being deleted
        
        //Stores answer to JOptionPane prior to event being deleted
        int answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete this event? All customer bookings will be cancelled.", "Delete?", JOptionPane.YES_NO_OPTION);
        
        if (answer == JOptionPane.YES_OPTION) {
            deleteSuccess = fileHandling.deleteRecord(deleteEventID, 8, "events.txt");
            System.gc();

            if (deleteSuccess == true) { //If event was successfully deleted...
                JOptionPane.showMessageDialog(null, "Event successfully deleted!", "Success!", JOptionPane.INFORMATION_MESSAGE);

                current.setCurrentForm("Search For Event"); //currentForm in Current class set to "Search For Event"

                addEventClock.stopClock();
                EventSearchUI eventSearchForm = new EventSearchUI(); //New EventSearchUI object created
                eventSearchForm.setVisible(true);
                dispose(); //Current form disposed of
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void typeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeBoxActionPerformed
        setEventIcon();
    }//GEN-LAST:event_typeBoxActionPerformed

    /**
     * Sets form features depending on forms current purpose
     */
    public void setFeatures() {
        if (currentForm.equals("Add An Event")) { //If form being used to add an event...
            deleteBtn.setEnabled(false);
            deleteBtn.setVisible(false);
        }

        if (currentForm.equals("Edit Event")) { //If form being used to edit an event...
            String[] currentEvent = current.getCurrentEvent(); //Stores events details in an array

            titleLbl.setText("Edit Event");
            ageTxt.setEnabled(false);
            priceTxt.setEnabled(false);
            addEditBtn.setText("Edit Event");

            eventTitleTxt.setText(currentEvent[1]);

            String eventType = currentEvent[2]; //Stores event type of current event
            if (eventType.equals("Film")) {
                typeBox.setSelectedIndex(0);
            }
            if (eventType.equals("Music")) {
                typeBox.setSelectedIndex(1);
            }
            if (eventType.equals("Other")) {
                typeBox.setSelectedIndex(2);
            }

            ageTxt.setText(currentEvent[3]);
            dateTxt.setText(currentEvent[4]);
            eventTimeTxt.setText(currentEvent[5]);
            priceTxt.setText(currentEvent[6]);
            descriptionTxt.setText(currentEvent[7]);
        }
    }

    /**
     * Contains all validation checks performed on a new event being added and
     * on a previous event being edited
     * 
     * @param title event title inputted by user
     * @param date event date inputted by user
     * @param time event time inputted by user
     * @param desc event description inputted by user
     * @return boolean stating whether or not all parameters pass validation checks
     */
    public boolean validation(String title, String date, String time, String desc) {
        boolean allValid = false; //Stores whether or not all parameters pass validation checks
        
        //Store whether relevant parameters pass presence check
        boolean titlePresence;
        boolean descPresence;
        //Stores whether relevant parameters pass length check
        boolean titleLength;
        boolean descLength;
        boolean lengthValid; //Stores whether both relevant parameters pass length check
        
        boolean validDate; //Stores whether the date parameter passes both format checks or not
        boolean dateFormat; //Stores whether or not date parametetr is in the required format (dd/mm/yyyy)
        boolean eventDateFormat; //Stores whether date parameter is valid (in the future) or not
        boolean timeFormat; //Stores whether or not time parameter is in the required format (00:00)
        //Stores whether relevant parameters feature commas or not
        boolean titleValid;
        boolean descValid;

        String currentDate = current.getCurrentDate(); //Stores current date

        titlePresence = validation.presenceCheck(title);
        descPresence = validation.presenceCheck(desc);
        
        if ((titlePresence && descPresence) != true) { //If title and description inputs are present...
            JOptionPane.showMessageDialog(null, "Please enter all information.", "Missing Information", JOptionPane.ERROR_MESSAGE);
        } else {
            titleLength = validation.belowLengthCheck(title, 30);
            descLength = validation.belowLengthCheck(desc, 150);
            
            lengthValid = true;
            if (titleLength == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter a shorter title (Max. characters 30)", "Title Length Error", JOptionPane.ERROR_MESSAGE);
            }
            if (descLength == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter a shorter description (Max. characters 150)", "Description Length Error", JOptionPane.ERROR_MESSAGE);
            }

            if (lengthValid == true) { //If title and description parameters pass length checks...
                validDate = false;
                dateFormat = validation.dateFormatCheck(date);
                
                if (dateFormat == true) {
                    eventDateFormat = validation.eventDateCheck(date, currentDate);

                    if (eventDateFormat == true) {
                        validDate = true; //Date parameter passes both validation checks
                    } else {
                        JOptionPane.showMessageDialog(null, "Please enter a valid event date.", "Event Date Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please reenter event date in the correct format (dd/mm/yyyy).", "Event Date Format Error", JOptionPane.ERROR_MESSAGE);
                }
                
                if (validDate == true) {
                    timeFormat = validation.timeFormatCheck(time);
                    
                    if (timeFormat == true) {
                        titleValid = validation.textFieldCheck(title);
                        
                        if (titleValid == true) {
                            descValid = validation.textAreaCheck(desc);
                            
                            if (descValid == false) {
                                JOptionPane.showMessageDialog(null, "Please ensure description contains no commas and is on only one line.", "Description Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                
                                allValid = true; //Parameters have passed all validation checks
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Please ensure event title contains no commas.", "Title Error", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Please reenter time in the correct format.", "Time Format Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }

        return allValid;
    }

    /**
     * Sets JLabel to relevant event icon both upon loading up the form
     * and when event type is changed
     */
    public void setEventIcon() {
        int index = typeBox.getSelectedIndex(); //Stores index of current event type
        String eventType = ""; //Stores current event type

        if (index == 0) {
            eventType = "Film";
        }
        if (index == 1) {
            eventType = "Music";
        }
        if (index == 2) {
            eventType = "Other";
        }

        image.setEventIcon(eventType, imageLbl); //Sets JLabel to relevant event icon
    }

    /**
     * Returns first 3 characters of a new events primary key
     * depending on the events type
     * 
     * @param eventType event type of record
     * @return first 3 characters of records primary key
     */
    public String findEventType(String eventType) {
        String idEventType = ""; //Stores first 3 characters of records primary key

        if (eventType.equalsIgnoreCase("Film")) {
            idEventType = "FIL";
        }
        if (eventType.equalsIgnoreCase("Music")) {
            idEventType = "MUS";
        }
        if (eventType.equalsIgnoreCase("Other")) {
            idEventType = "OTH";
        }

        return idEventType;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEventUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEventUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEventUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEventUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEventUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEditBtn;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTxt;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel cinemaLbl;
    private javax.swing.JLabel dateLbl;
    private javax.swing.JTextField dateTxt;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel descriptionLbl;
    private javax.swing.JTextArea descriptionTxt;
    private javax.swing.JLabel eventTimeLbl;
    private javax.swing.JTextField eventTimeTxt;
    private javax.swing.JLabel eventTitleLbl;
    private javax.swing.JTextField eventTitleTxt;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JComboBox<String> typeBox;
    private javax.swing.JLabel typeLbl;
    // End of variables declaration//GEN-END:variables
}
