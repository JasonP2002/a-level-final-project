package CinemaInc;

import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jason
 */
public class AccountUI extends javax.swing.JFrame { //AccountUI class initializes and stores all methods related to
                                                   //the Account Creation/Details Form

    //New Clock, Current, FileHandling, Search, Sort and Validation
    //objects created
    Clock accountClock = new Clock();
    Current current = new Current();
    FileHandling fileHandling = new FileHandling();
    Search search = new Search();
    Sort sort = new Sort();
    Validation validation = new Validation();

    String currentForm = current.getCurrentForm(); //Stores the current purpose of this form

    /**
     * Constructor method for AccountUI class
     *
     * Creates new form AccountUI 
     * Sets form features depending on forms current purpose
     * Starts Clock
     */
    public AccountUI() {
        initComponents();

        setLocationRelativeTo(null);

        setFeatures();

        accountClock.setLabel(timeLbl);
        accountClock.setFrame(this);
        accountClock.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cinemaLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        timeLbl = new javax.swing.JLabel();
        userLbl = new javax.swing.JLabel();
        userBox = new javax.swing.JComboBox<>();
        forenameLbl = new javax.swing.JLabel();
        forenameTxt = new javax.swing.JTextField();
        email2Txt = new javax.swing.JTextField();
        surnameLbl = new javax.swing.JLabel();
        surnameTxt = new javax.swing.JTextField();
        telephoneLbl = new javax.swing.JLabel();
        telephoneTxt = new javax.swing.JTextField();
        email1Lbl = new javax.swing.JLabel();
        email1Txt = new javax.swing.JTextField();
        email2Lbl = new javax.swing.JLabel();
        addr1Lbl = new javax.swing.JLabel();
        addr1Txt = new javax.swing.JTextField();
        addr2Lbl = new javax.swing.JLabel();
        addr2Txt = new javax.swing.JTextField();
        addr3Lbl = new javax.swing.JLabel();
        addr3Txt = new javax.swing.JTextField();
        postcodeLbl = new javax.swing.JLabel();
        postcodeTxt = new javax.swing.JTextField();
        dobLbl = new javax.swing.JLabel();
        dobTxt = new javax.swing.JTextField();
        password1Lbl = new javax.swing.JLabel();
        password1Txt = new javax.swing.JTextField();
        password2Txt = new javax.swing.JTextField();
        password2Lbl = new javax.swing.JLabel();
        previousBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        rightBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cinemaLbl.setFont(new java.awt.Font("Tahoma", 3, 60)); // NOI18N
        cinemaLbl.setText("Cinema Inc.");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Create An Account");

        timeLbl.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        timeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLbl.setText("00:00");

        userLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        userLbl.setText("User is a:");

        userBox.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        userBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Worker", "Manager" }));

        forenameLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        forenameLbl.setText("Forename:");

        forenameTxt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        email2Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        surnameLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        surnameLbl.setText("Surname:");

        surnameTxt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        telephoneLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        telephoneLbl.setText("Telephone Number:");

        telephoneTxt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        email1Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        email1Lbl.setText("Email Address:");

        email1Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        email2Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        email2Lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        email2Lbl.setText("Confirm Email Address:");

        addr1Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        addr1Lbl.setText("Address Line 1:");

        addr1Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        addr2Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        addr2Lbl.setText("Address Line 2:");

        addr2Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        addr3Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        addr3Lbl.setText("Address Line 3:");

        addr3Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        postcodeLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        postcodeLbl.setText("Postcode:");

        postcodeTxt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        dobLbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        dobLbl.setText("Date of Birth:");

        dobTxt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        dobTxt.setText("dd/mm/yyyy");

        password1Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        password1Lbl.setText("Password:");

        password1Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        password2Txt.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        password2Lbl.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        password2Lbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        password2Lbl.setText("Confirm Password:");

        previousBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        previousBtn.setText("Back");
        previousBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        editBtn.setText("Edit Account");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        deleteBtn.setText("Delete Account");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        rightBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        rightBtn.setText("Sign Up");
        rightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(password1Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dobLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(postcodeLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addr3Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addr2Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addr1Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(email1Lbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(telephoneLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(surnameLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(forenameLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userBox, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(forenameTxt)
                            .addComponent(surnameTxt)
                            .addComponent(telephoneTxt)
                            .addComponent(email1Txt)
                            .addComponent(addr1Txt)
                            .addComponent(addr2Txt)
                            .addComponent(addr3Txt)
                            .addComponent(postcodeTxt)
                            .addComponent(dobTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addComponent(password1Txt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(email2Txt)
                            .addComponent(email2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                            .addComponent(password2Txt)
                            .addComponent(password2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(previousBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cinemaLbl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                                .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                                    .addComponent(rightBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cinemaLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userBox)
                    .addComponent(userLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forenameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(forenameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(surnameTxt)
                    .addComponent(surnameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(telephoneTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(telephoneLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(email2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(email1Txt, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(email1Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(email2Txt))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addr1Txt, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(addr1Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addr2Txt)
                    .addComponent(addr2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addr3Txt)
                    .addComponent(addr3Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(postcodeTxt)
                    .addComponent(postcodeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(password2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dobTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(dobLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(password1Txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(password2Txt, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(password1Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(previousBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed
        if (currentForm.equals("Sign Up") || currentForm.equals("Create An Account")) { //If form is either being used to sign up or create another users account
            boolean allValid = false; //Stores whether all validation checks have been passed or not
            boolean addSuccess; //Stores whether record was successfully added to file or not
            int numberRecords; //Stores current number of records in the user accounts file

            //Stores all details inputted by user
            String forename = forenameTxt.getText();
            String surname = surnameTxt.getText();
            String telephone = telephoneTxt.getText();
            String email1 = email1Txt.getText();
            String email2 = email2Txt.getText();

            String addr1 = addr1Txt.getText();
            String addr2 = addr2Txt.getText();
            String addr3 = addr3Txt.getText();
            String postcode = postcodeTxt.getText();

            String dob = dobTxt.getText();
            String password1 = password1Txt.getText();
            String password2 = password2Txt.getText();

            boolean generalValid; //Stores whether validation checks shared by adding + editing an account have been passed or not

            //Booleans for the validation checks utulized only when adding a new account
            //Stores whether or not email and password inputs pass presence checks
            boolean email1Presence;
            boolean password1Presence;
            //Stores whether or not confirmation inputs pass presence checks
            boolean email2Presence;
            boolean password2Presence;
            boolean emailExists; //Stores whether or not email a user has input is already registered to an account
            boolean validDate; //Stores whether or not date of birth has passed both validation checks
            boolean dateFormat; //Stores whether or not date of birth is in the correct format (dd/mm/yyyy)
            boolean dobFormat; //Stores whether or not date of birth is valid (in the past)

            String currentDate = current.getCurrentDate(); //Stores the current date

            String comboBoxLoa; //Stores combo box option
            String accountLoa = ""; //Stores the level of access of new user account
            String id = ""; //Stores randomly generated primary key of new record
            String record; //Stores full record
            String[] currentUser = new String[11]; //Stores full record as an array

            if (currentForm.equals("Create An Account")) { //If form is being used to create another users account
                                                           //(level of access could be worker or manager)
                comboBoxLoa = String.valueOf(userBox.getSelectedItem());
                
                //First 3 characters of primary key based on new accounts level of access
                if (comboBoxLoa.equalsIgnoreCase("Worker")) {
                    accountLoa = "WOR";
                }
                if (comboBoxLoa.equalsIgnoreCase("Manager")) {
                    accountLoa = "MAN";
                }
            }

            if (currentForm.equals("Sign Up")) { //If form is being used by a customer to sign up
                                                 //(level of access can only be customer)
                accountLoa = "CUS";
            }

            id = fileHandling.generatePK(accountLoa);

            //Stores primary key and all details as a comma separated String
            record = id + "," + email1 + "," + password1 + "," + forename + "," + surname + "," + telephone + "," + addr1 + "," + addr2 + "," + addr3 + "," + postcode + "," + dob;

            email1Presence = validation.presenceCheck(email1);
            password1Presence = validation.presenceCheck(password1);

            if ((email1Presence && password1Presence) != true) {
                JOptionPane.showMessageDialog(null, "Please enter both email and password.", "Email/Password Error", JOptionPane.ERROR_MESSAGE);
            } else {
                email2Presence = validation.presenceCheck(email2);
                password2Presence = validation.presenceCheck(password2);

                if ((email2Presence && password2Presence) != true) {
                    JOptionPane.showMessageDialog(null, "Please confirm email and password.", "Confirmation Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    if (((email2.matches(email1)) == false) || ((password2.matches(password1)) == false)) { //If email and password inputs dont match with confirmation inputs...
                        JOptionPane.showMessageDialog(null, "Please ensure emails and passwords match.", "Confirmation Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        generalValid = validation(forename, surname, telephone, email1, addr1, addr2, addr3, postcode, password1);

                        if (generalValid == true) { //If all validation checks shared by adding + editing an account are passed...
                            emailExists = search.emailSearch(email1);

                            if (emailExists == false) { //If email input is not already registered to an account...
                                validDate = false;
                                dateFormat = validation.dateFormatCheck(dob);

                                if (dateFormat == false) {
                                    JOptionPane.showMessageDialog(null, "Please reenter date of birth in the correct format (dd/mm/yyyy).", "Date of Birth Format Error", JOptionPane.ERROR_MESSAGE);
                                } else {
                                    dobFormat = validation.dobDateCheck(dob, currentDate);

                                    if (dobFormat == false) {
                                        JOptionPane.showMessageDialog(null, "Please enter a valid date of birth.", "Date of Birth Error", JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        validDate = true;
                                    }
                                }

                                if (validDate == true) {
                                    allValid = true; //All validation checks passed
                                }

                            }
                        }
                    }
                }
            }

            if (allValid == true) { //If all validation checks have been passed...
                addSuccess = fileHandling.addRecord(record, "users.txt");

                if (addSuccess == true) { //If account has been successfully added...
                    numberRecords = search.countRecords("users.txt");
                    sort.bubbleSort("users.txt", 11, numberRecords); //File sorted into ascending order of primary key

                    if (currentForm.equals("Sign Up")) { //If form is being used by a customer to sign up...
                        JOptionPane.showMessageDialog(null, "Welcome to Cinema Inc. " + forename + "!", "Welcome!", JOptionPane.INFORMATION_MESSAGE);
                        currentUser = record.split(","); //Splits new accounts details into array
                        current.setCurrentUser(currentUser); //Sets currentUser in Current class to new accounts details
                    }

                    if (currentForm.equals("Create An Account")) { //If form is being used to create another users account...
                        JOptionPane.showMessageDialog(null, "Account for " + forename + " " + surname + " created!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                    }

                    current.setCurrentForm("Main Menu"); //Sets currentForm variable in Current Class to "Main Menu"

                    accountClock.stopClock();
                    MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
                    mainMenuForm.setVisible(true);
                    dispose(); //Current form disposed of
                }
            }
        }

        if (currentForm.equals("Account Details")) { //If form is being used to view accounts details...
            JOptionPane.showMessageDialog(null, "See you soon!", "Log Out", JOptionPane.INFORMATION_MESSAGE);

            current.logOutUser(); //Current user logged out (currentUser[] in Current class cleared)

            accountClock.stopClock();
            LogInUI logInForm = new LogInUI(); //New LogInUI object created
            logInForm.setVisible(true);
            dispose(); //Current form disposed of
        }
    }//GEN-LAST:event_rightBtnActionPerformed

    private void previousBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousBtnActionPerformed
        if (currentForm.equals("Sign Up")) { //If form is being used by a customer to sign up...
            
            accountClock.stopClock();
            LogInUI logInForm = new LogInUI(); //New LogInUI object created
            logInForm.setVisible(true);
            dispose(); //Current form disposed of
        }

        //If form is being used to create another users account or to view account details...
        if (currentForm.equals("Create An Account") || currentForm.equals("Account Details")) {
            current.setCurrentForm("Main Menu"); //Sets currentForm variable in Current Class to "Main Menu"

            accountClock.stopClock();
            MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
            mainMenuForm.setVisible(true);
            dispose(); //Current form disposed of
        }
    }//GEN-LAST:event_previousBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        //Stores response to JOptionPane prior to an account being edited
        int answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to edit your account?", "Edit?", JOptionPane.YES_NO_OPTION);

        if (answer == JOptionPane.YES_OPTION) {
            //Stores all text field inputs
            String forename = forenameTxt.getText();
            String surname = surnameTxt.getText();
            String telephone = telephoneTxt.getText();
            String editedEmail = email1Txt.getText();

            String addr1 = addr1Txt.getText();
            String addr2 = addr2Txt.getText();
            String addr3 = addr3Txt.getText();
            String postcode = postcodeTxt.getText();

            String dob = dobTxt.getText();
            String password = password1Txt.getText();
            
            String[] currentDetails = current.getCurrentUserDetails(); //Stores users current details as an array
            String currentEmail = currentDetails[1]; //Stores users current email

            boolean allValid; //Stores whether inputted data passes validation checks or not
            boolean emailExists; //Stores whether or not edited email is already registerd to an account (not including account currently logged in)
            boolean editSuccess; //Stores whether account was successfully edited or not

            String id = current.getCurrentUserID(); //Stores primary key of current users account
            //All details stored as a comma separated String
            String editedRecord = id + "," + editedEmail + "," + password + "," + forename + "," + surname + "," + telephone + "," + addr1 + "," + addr2 + "," + addr3 + "," + postcode + "," + dob;
            String editedUser[] = new String[11]; //Stores edited details as an array

            allValid = validation(forename, surname, telephone, editedEmail, addr1, addr2, addr3, postcode, password);
            if (allValid == true) { //If data has passed all validation checks...

                if (editedEmail.matches(currentEmail)) { //If email has not been edited...
                    emailExists = false; //Email search not performed
                } else { //If email has been edited...
                    emailExists = search.emailSearch(editedEmail);
                }

                if (emailExists == false) { //If editedEmail is not registered to an existing account (excluding logged in account)
                    editSuccess = fileHandling.editRecord(id, editedRecord, 11, "users.txt");

                    if (editSuccess == true) { //If account has been edited successfully...
                        JOptionPane.showMessageDialog(null, "Your account has been edited!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                        editedUser = editedRecord.split(","); //Edited details split into array
                        current.setCurrentUser(editedUser); //currentUser in Current class set to editedUser[]

                        current.setCurrentForm("Main Menu"); //currentForm in Current class set to "Main Menu"

                        accountClock.stopClock();
                        MainMenuUI mainMenuForm = new MainMenuUI(); //New MainMenuUI object created
                        mainMenuForm.setVisible(true);
                        dispose(); //Current form disposed of
                    }
                }
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //Stores response to JOptionPane question prior to a user deleting their account
        int answer = JOptionPane.showConfirmDialog(null, "Are you sure you wish to delete your account?", "Delete?", JOptionPane.YES_NO_OPTION);

        if (answer == JOptionPane.YES_OPTION) {
            String id = current.getCurrentUserID(); //Stores primary key of users account
            //Stores whether or not a user has items in their basket
            boolean hasEventInBasket = search.deleteAccountSearch("basket.txt", id);
            //Stores whether or not a user has any finalized bookings
            boolean hasEventBooked = search.deleteAccountSearch("bookings.txt", id);
            boolean deleteSuccess; //Stores whether an account was succesfully deleted or not

            if (hasEventInBasket == false) { //If a user has no items in their basket...
                
                if (hasEventBooked == false) { //If a user has no finalized bookings...

                    deleteSuccess = fileHandling.deleteRecord(id, 11, "users.txt");

                    if (deleteSuccess == true) { //If account has been deleted successfully...
                        JOptionPane.showMessageDialog(null, "Your account has been deleted. See you soon!", "Success!", JOptionPane.INFORMATION_MESSAGE);

                        current.logOutUser(); //Current user logged out (currentUser[] in Current class cleared)

                        accountClock.stopClock();
                        LogInUI logInForm = new LogInUI(); //New LogInUI object created
                        logInForm.setVisible(true);
                        dispose(); //Current form disposed of
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Please remove all events from basket before deleting your account.", "Cannot Delete Account!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "You cannot delete your account while you have an event booking.", "Cannot Delete Account!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    /**
     * Sets form features depending on forms current purpose
     */
    public void setFeatures() {
        //If the form is being used to sign up or create another users account...
        if ((currentForm.equals("Sign Up")) || (currentForm.equals("Create An Account"))) {
            editBtn.setEnabled(false);
            editBtn.setVisible(false);
            deleteBtn.setEnabled(false);
            deleteBtn.setVisible(false);
        }

        //If the form is being used by a customer to sign up...
        if (currentForm.equals("Sign Up")) {
            userLbl.setVisible(false);
            userBox.setEnabled(false);
            userBox.setVisible(false);
        }

        //If the form is being used to view account details...
        if (currentForm.equals("Account Details")) {
            //Stores account details of the account currently logged in as an array
            String[] currentUserDetails = new String[11];
            currentUserDetails = current.getCurrentUserDetails();

            titleLbl.setText("Account Details");
            userLbl.setVisible(false);
            userBox.setEnabled(false);
            userBox.setVisible(false);
            email2Lbl.setVisible(false);
            email2Txt.setEnabled(false);
            email2Txt.setVisible(false);
            dobTxt.setEnabled(false);
            password2Lbl.setVisible(false);
            password2Txt.setEnabled(false);
            password2Txt.setVisible(false);
            rightBtn.setText("Log Out");

            //Displays all account details in their relevant text fields
            forenameTxt.setText(currentUserDetails[3]);
            surnameTxt.setText(currentUserDetails[4]);
            telephoneTxt.setText(currentUserDetails[5]);
            email1Txt.setText(currentUserDetails[1]);
            addr1Txt.setText(currentUserDetails[6]);
            addr2Txt.setText(currentUserDetails[7]);
            addr3Txt.setText(currentUserDetails[8]);
            postcodeTxt.setText(currentUserDetails[9]);
            dobTxt.setText(currentUserDetails[10]);
            password1Txt.setText(currentUserDetails[2]);
        }
    }

    /**
     * Contains all validation checks performed on a new account being added and
     * on a previous account being edited
     * 
     * @param forename forename input
     * @param surname surname input
     * @param telephone telephone number input
     * @param email email address input
     * @param addr1 address line 1 input
     * @param addr2 address line 2 input
     * @param addr3 address line 3 input
     * @param postcode postcode input
     * @param password password input
     * @return boolean stating whether or not parameters have passed all validation checks
     */
    public boolean validation(String forename, String surname, String telephone, String email, String addr1, String addr2, String addr3, String postcode, String password) {
        boolean allValid = false; //Stores whether parameters have passed all validation checks or not

        //Stores whether relevant parameter has passed a presence check or not
        boolean forenamePresence = validation.presenceCheck(forename);
        boolean surnamePresence = validation.presenceCheck(surname);
        boolean telephonePresence = validation.presenceCheck(telephone);
        boolean email1Presence = validation.presenceCheck(email);
        boolean addr1Presence = validation.presenceCheck(addr1);
        boolean addr2Presence = validation.presenceCheck(addr2);
        boolean addr3Presence = validation.presenceCheck(addr3);
        boolean postcodePresence = validation.presenceCheck(postcode);
        boolean password1Presence = validation.presenceCheck(password);

        //Stores whether all relevant parameters have passed a length check or not
        boolean lengthValid;
        //Stores whether or not the relevant parameter has passed a length check
        boolean forenameLength;
        boolean surnameLength;
        boolean emailLength;
        boolean addr1Length;
        boolean addr2Length;
        boolean addr3Length;
        boolean passwordLength;

        //Stores whether any parameters contain commas or not
        boolean noCommas;
        //Stores whether the relevant parameter contains commas or not
        boolean forenameValid;
        boolean surnameValid;
        boolean emailValid;
        boolean addr1Valid;
        boolean addr2Valid;
        boolean addr3Valid;
        boolean passwordValid;

        //Stores whether or not telephone parameter has passed a format check (11 digits long)
        boolean telephoneFormat;
        //Stores whether or not postcode parameter has passed a format check (between 6 and 8 characters long, ending with numeric, alpha, alpha format)
        boolean postcodeFormat;

        //If any parameters arent present...
        if ((forenamePresence && surnamePresence && telephonePresence && email1Presence && addr1Presence && addr2Presence && addr3Presence && postcodePresence && password1Presence) != true) {
            JOptionPane.showMessageDialog(null, "Please enter all information.", "Missing Information", JOptionPane.ERROR_MESSAGE);
            
        } else { //If all presence checks are passed...
            forenameLength = validation.belowLengthCheck(forename, 20);
            surnameLength = validation.belowLengthCheck(surname, 20);
            emailLength = validation.belowLengthCheck(email, 30);
            addr1Length = validation.belowLengthCheck(addr1, 30);
            addr2Length = validation.belowLengthCheck(addr2, 20);
            addr3Length = validation.belowLengthCheck(addr3, 20);
            passwordLength = validation.aboveLengthCheck(password, 10);

            lengthValid = true;

            if ((forenameLength || surnameLength) == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter a shorter forename/surname (Max. characters 20 each).", "Name Length Error", JOptionPane.ERROR_MESSAGE);
            }

            if (emailLength == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter a shorter email (Max. characters 30).", "Email Length Error", JOptionPane.ERROR_MESSAGE);
            }

            if ((addr1Length || addr2Length || addr3Length) == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter shorter address lines.", "Address Length Error", JOptionPane.ERROR_MESSAGE);
            }

            if (passwordLength == false) {
                lengthValid = false;
                JOptionPane.showMessageDialog(null, "Please enter a longer password (Min. characters 10)", "Password Length Error", JOptionPane.ERROR_MESSAGE);
            }

            if (lengthValid == true) { //If all length checks are passed...
                forenameValid = validation.textFieldCheck(forename);
                surnameValid = validation.textFieldCheck(surname);
                emailValid = validation.textFieldCheck(email);
                addr1Valid = validation.textFieldCheck(addr1);
                addr2Valid = validation.textFieldCheck(addr2);
                addr3Valid = validation.textFieldCheck(addr3);
                passwordValid = validation.textFieldCheck(password);
                noCommas = true;

                if ((forenameValid == false) || (surnameValid == false)) {
                    noCommas = false;
                    JOptionPane.showMessageDialog(null, "Please ensure no special characters (e.g. commas) in name.", "Name Error", JOptionPane.ERROR_MESSAGE);
                }

                if (emailValid == false) {
                    noCommas = false;
                    JOptionPane.showMessageDialog(null, "Please ensure no commas in email address.", "Email Error", JOptionPane.ERROR_MESSAGE);
                }

                if ((addr1Valid == false) || (addr2Valid == false) || (addr3Valid == false)) {
                    noCommas = false;
                    JOptionPane.showMessageDialog(null, "Please ensure no commas in address.", "Address Error", JOptionPane.ERROR_MESSAGE);
                }

                if (passwordValid == false) {
                    noCommas = false;
                    JOptionPane.showMessageDialog(null, "Please ensure no commas in password", "Password Error", JOptionPane.ERROR_MESSAGE);
                }

                if (noCommas == true) { //If all text field checks have been passed...
                    telephoneFormat = validation.telephoneFormatCheck(telephone);

                    if (telephoneFormat == false) {
                        JOptionPane.showMessageDialog(null, "Please ensure telephone no. is the correct length and format.", "Telephone No. Format Error", JOptionPane.ERROR_MESSAGE);

                    } else {
                        postcodeFormat = validation.postcodeFormatCheck(postcode);

                        if (postcodeFormat == false) { 
                            JOptionPane.showMessageDialog(null, "Please reenter postcode in the correct format.", "Postcode Format Error", JOptionPane.ERROR_MESSAGE);

                        } else {
                            allValid = true; //Parameters have passed all validation checks
                        }
                    }
                }
            }
        }

        return allValid;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addr1Lbl;
    private javax.swing.JTextField addr1Txt;
    private javax.swing.JLabel addr2Lbl;
    private javax.swing.JTextField addr2Txt;
    private javax.swing.JLabel addr3Lbl;
    private javax.swing.JTextField addr3Txt;
    private javax.swing.JLabel cinemaLbl;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel dobLbl;
    private javax.swing.JTextField dobTxt;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel email1Lbl;
    private javax.swing.JTextField email1Txt;
    private javax.swing.JLabel email2Lbl;
    private javax.swing.JTextField email2Txt;
    private javax.swing.JLabel forenameLbl;
    private javax.swing.JTextField forenameTxt;
    private javax.swing.JLabel password1Lbl;
    private javax.swing.JTextField password1Txt;
    private javax.swing.JLabel password2Lbl;
    private javax.swing.JTextField password2Txt;
    private javax.swing.JLabel postcodeLbl;
    private javax.swing.JTextField postcodeTxt;
    private javax.swing.JButton previousBtn;
    private javax.swing.JButton rightBtn;
    private javax.swing.JLabel surnameLbl;
    private javax.swing.JTextField surnameTxt;
    private javax.swing.JLabel telephoneLbl;
    private javax.swing.JTextField telephoneTxt;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JComboBox<String> userBox;
    private javax.swing.JLabel userLbl;
    // End of variables declaration//GEN-END:variables
}
