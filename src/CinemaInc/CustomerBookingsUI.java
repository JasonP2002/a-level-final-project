package CinemaInc;

import java.io.BufferedReader;
import java.io.FileReader;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jason
 */
public class CustomerBookingsUI extends javax.swing.JFrame { //CustomerBookingsUI class initializes and contains all methods related
    //to the Customer Bookings Form

    //New Clock, Currency and Current objects created
    Clock bookingsClock = new Clock();
    Currency currency = new Currency();
    Current current = new Current();

    //Stores primary key of event thats bookings will be displayed to the table
    String eventID = current.getCurrentEventID();

    /**
     * Constructor method for CustomerBookingsUI class
     *
     * Creates new form CustomerBookingsUI Starts clock Displays relevant
     * customer bookings to table
     */
    public CustomerBookingsUI() {
        initComponents();

        setLocationRelativeTo(null);

        bookingsClock.setLabel(timeLbl);
        bookingsClock.setFrame(this);
        bookingsClock.start();

        bookingsIntoTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cinemaLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        timeLbl = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        seatsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerTable = new javax.swing.JTable();
        totalTxt = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cinemaLbl.setFont(new java.awt.Font("Tahoma", 3, 60)); // NOI18N
        cinemaLbl.setText("Cinema Inc.");

        titleLbl.setFont(new java.awt.Font("Tahoma", 0, 60)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("Customer Bookings");

        timeLbl.setFont(new java.awt.Font("Tahoma", 1, 60)); // NOI18N
        timeLbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        timeLbl.setText("00:00");

        backBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        seatsBtn.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        seatsBtn.setText("View Seats");
        seatsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seatsBtnActionPerformed(evt);
            }
        });

        customerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Full Name", "Telephone No.", "1st Line of Address", "Postcode", "Number of Booked Seats", "Seats Booked", "Cost of Booking"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerTable);
        if (customerTable.getColumnModel().getColumnCount() > 0) {
            customerTable.getColumnModel().getColumn(0).setResizable(false);
            customerTable.getColumnModel().getColumn(1).setResizable(false);
            customerTable.getColumnModel().getColumn(2).setResizable(false);
            customerTable.getColumnModel().getColumn(3).setResizable(false);
        }

        totalTxt.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        totalTxt.setText("Total: Â£");
        totalTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cinemaLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(seatsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cinemaLbl)
                        .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(timeLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                    .addComponent(seatsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        current.setCurrentForm("Event Info"); //Sets currentForm in Current class to "Event Info"

        bookingsClock.stopClock();
        EventInfoUI eventInfoForm = new EventInfoUI(); //New EventInfoUI object created
        eventInfoForm.setVisible(true);
        dispose(); //Current form disposed of
    }//GEN-LAST:event_backBtnActionPerformed

    private void seatsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seatsBtnActionPerformed
        current.setCurrentForm("View Seating Plan"); //Sets currentForm in Current class to "View Seating Plan"

        bookingsClock.stopClock();
        SeatingPlanUI seatingPlanUI = new SeatingPlanUI(); //New SeatingPlanUI object created
        seatingPlanUI.setVisible(true);
        dispose(); //Current form disposed of
    }//GEN-LAST:event_seatsBtnActionPerformed

    /**
     * Searches through the finalized bookings file to find bookings related to
     * a specific event. Upon coming across a booking, the user accounts file is
     * also search through to find the account linked to that booking. The
     * bookings and the details of the users linked to them are then displayed
     * on the bookings table
     */
    public void bookingsIntoTable() {
        String filenameBookings = "bookings.txt"; //Stores finalized bookings file
        String currentBookingLine; //Stores current line being read from finalized bookings file
        //Stores current line of finalized bookings file as an array
        String currentBooking[] = new String[6];

        String filenameAccounts = "users.txt"; //Stores user accounts file
        String currentAccountLine; //Stores current line being read from user accounts file
        //Stores current line of user accounts file as an array
        String currentAccount[] = new String[11];
        boolean accountFound; //Stores whether account linked to booking has been found or not

        //New DefaultTableModel created for customerTable
        DefaultTableModel customerModel = (DefaultTableModel) customerTable.getModel();
        String row[] = new String[7]; //Stores current row to be displayed on the bookings table
        float total = 0; //Stores total of all bookings

        try {
            FileReader bookingsFileReader = new FileReader(filenameBookings); //New FileReader object created for filenameBookings
            BufferedReader bookingsBufferReader = new BufferedReader(bookingsFileReader); //New BufferedReader object created for bookingsFileReader

            while ((currentBookingLine = bookingsBufferReader.readLine()) != null) { //While more bookings...
                currentBooking = currentBookingLine.split(","); //Current line of bookings file split into array

                if (currentBooking[2].equals(eventID)) { //If current booking is for the specified event...
                    accountFound = false;

                    try {
                        FileReader accountsFileReader = new FileReader(filenameAccounts); //New FileReader object created for filenameAccounts
                        BufferedReader accountsBufferReader = new BufferedReader(accountsFileReader); //New BufferedReader object created for accountsFileReader

                        //While more accounts + account linked to current booking not found...
                        while ((currentAccountLine = accountsBufferReader.readLine()) != null && accountFound == false) {
                            currentAccount = currentAccountLine.split(","); //Current line of account file split into array

                            //If account linked to booking is found...
                            if (currentAccount[0].equals(currentBooking[1])) {
                                row[0] = currentAccount[3] + " " + currentAccount[4];
                                row[1] = currentAccount[5];
                                row[2] = currentAccount[6];
                                row[3] = currentAccount[9];
                                accountFound = true;
                            }
                        }

                        //If account linked to booking was not found...
                        if (accountFound == false) {
                            row[0] = "Name not found";
                            row[1] = "Telephone Number not found";
                            row[2] = "Address Line not found";
                            row[3] = "Postcode not found";
                        }

                        accountsFileReader.close();
                        accountsBufferReader.close();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                        System.out.println("Something went wrong" + ex);
                    }

                    row[4] = currentBooking[3];
                    row[5] = currentBooking[4];
                    //Cost of booking formatted correctly and stored in row[] array
                    row[6] = "Â£" + currency.formatConversion(currentBooking[5]);

                    //Total of all bookings added to
                    total = total + Float.parseFloat(currentBooking[5]);

                    customerModel.addRow(row); //Current row added to bookings table
                }
            }

            bookingsFileReader.close();
            bookingsBufferReader.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            System.out.println("Something went wrong" + ex);
        }

        //Total formatted correctly and displayed to JLabel
        String labelTotal = currency.formatConversion(String.valueOf(total));
        totalTxt.setText("Total: Â£" + labelTotal);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerBookingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerBookingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerBookingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerBookingsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerBookingsUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel cinemaLbl;
    private javax.swing.JTable customerTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton seatsBtn;
    private javax.swing.JLabel timeLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel totalTxt;
    // End of variables declaration//GEN-END:variables
}
